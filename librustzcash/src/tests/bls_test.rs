use pairing::{
    CurveAffine, EncodedPoint,
    bls12_381::{
        G1Affine, G1Compressed,
    }
};
use {
    read_G1, read_G2, librustzcash_msg_hash, librustzcash_sk_to_pk,  librustzcash_sign,
    librustzcash_verify, librustzcash_pk_aggregate, librustzcash_sig_aggregate,
};

#[test]
fn test_librustzcash_msg_hash() {
    let mut r1 =  [0u8; 32];
    let mut r2 = [0u8; 96];
    let mut r3 = [0u8; 96];
    assert!(
        librustzcash_msg_hash(&r1[0], 32, &mut r2)
    );
    r1[0] = 1;
    assert!(
        librustzcash_msg_hash(&r1[0], 32, &mut r3)
    );
    assert_ne!(&r2[..],&r3[..]);
}

#[test]
fn test_librustzcash_sk_to_pk() {
    let r1:[u8;32] =  [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
    let mut r2 = [0u8; 48];
    assert!(
        librustzcash_sk_to_pk(&r1, &mut r2)
    );
    let g1_repr = read_G1(&r2);
    let g1 = g1_repr.into_affine().unwrap();
    assert_eq!(g1, G1Affine::one());
}

#[test]
fn test_librustzcash_sign() {
    let msg_hash: [u8;96] = [
        0xab, 0x6c, 0x02, 0xbf, 0xb7, 0xc0, 0x75, 0x48, 0x73, 0x80, 0x89, 0xd9, 0x0a, 0x98, 0xff, 0x7c,
        0xe4, 0x49, 0xae, 0x77, 0xaf, 0x9f, 0x2e, 0x02, 0x97, 0x9d, 0x43, 0xff, 0x44, 0xca, 0x0f, 0xf1,
        0x7f, 0xab, 0x90, 0x12, 0x16, 0x4e, 0x01, 0x1b, 0xbd, 0x9e, 0xce, 0xf9, 0x13, 0xad, 0xdb, 0xb6,
        0x00, 0xfd, 0x77, 0xa3, 0x9a, 0xd0, 0x14, 0xb5, 0xe9, 0xf4, 0xdb, 0x02, 0xcb, 0x9e, 0x06, 0xa7,
        0x35, 0x88, 0xc8, 0xaf, 0x2f, 0x00, 0x64, 0x45, 0xc2, 0x50, 0x30, 0x7e, 0x7f, 0x90, 0xfd, 0xfb,
        0x83, 0xbd, 0x6c, 0x5f, 0xea, 0x4a, 0x2b, 0xa2, 0x03, 0x29, 0xdc, 0x12, 0x26, 0xa1, 0xe8, 0x6f,
    ];
    let sk: [u8;32] = [1,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0,0];
    let mut sig = [0u8;96];
    assert!(
        librustzcash_sign(&msg_hash, &sk, &mut sig)
    );
    assert_eq!(&msg_hash[..], &sig[..]);
}

#[test]
fn test_librustzcash_verify(){
    let signature: [u8;96] = [
        0xab, 0x6c, 0x02, 0xbf, 0xb7, 0xc0, 0x75, 0x48, 0x73, 0x80, 0x89, 0xd9, 0x0a, 0x98, 0xff, 0x7c,
        0xe4, 0x49, 0xae, 0x77, 0xaf, 0x9f, 0x2e, 0x02, 0x97, 0x9d, 0x43, 0xff, 0x44, 0xca, 0x0f, 0xf1,
        0x7f, 0xab, 0x90, 0x12, 0x16, 0x4e, 0x01, 0x1b, 0xbd, 0x9e, 0xce, 0xf9, 0x13, 0xad, 0xdb, 0xb6,
        0x00, 0xfd, 0x77, 0xa3, 0x9a, 0xd0, 0x14, 0xb5, 0xe9, 0xf4, 0xdb, 0x02, 0xcb, 0x9e, 0x06, 0xa7,
        0x35, 0x88, 0xc8, 0xaf, 0x2f, 0x00, 0x64, 0x45, 0xc2, 0x50, 0x30, 0x7e, 0x7f, 0x90, 0xfd, 0xfb,
        0x83, 0xbd, 0x6c, 0x5f, 0xea, 0x4a, 0x2b, 0xa2, 0x03, 0x29, 0xdc, 0x12, 0x26, 0xa1, 0xe8, 0x6f,
    ];
    let msg_hash: [u8;96] = [
        0xab, 0x6c, 0x02, 0xbf, 0xb7, 0xc0, 0x75, 0x48, 0x73, 0x80, 0x89, 0xd9, 0x0a, 0x98, 0xff, 0x7c,
        0xe4, 0x49, 0xae, 0x77, 0xaf, 0x9f, 0x2e, 0x02, 0x97, 0x9d, 0x43, 0xff, 0x44, 0xca, 0x0f, 0xf1,
        0x7f, 0xab, 0x90, 0x12, 0x16, 0x4e, 0x01, 0x1b, 0xbd, 0x9e, 0xce, 0xf9, 0x13, 0xad, 0xdb, 0xb6,
        0x00, 0xfd, 0x77, 0xa3, 0x9a, 0xd0, 0x14, 0xb5, 0xe9, 0xf4, 0xdb, 0x02, 0xcb, 0x9e, 0x06, 0xa7,
        0x35, 0x88, 0xc8, 0xaf, 0x2f, 0x00, 0x64, 0x45, 0xc2, 0x50, 0x30, 0x7e, 0x7f, 0x90, 0xfd, 0xfb,
        0x83, 0xbd, 0x6c, 0x5f, 0xea, 0x4a, 0x2b, 0xa2, 0x03, 0x29, 0xdc, 0x12, 0x26, 0xa1, 0xe8, 0x6f,
    ];
    let pk: [u8;48] = [
        0x97, 0xf1, 0xd3, 0xa7, 0x31, 0x97, 0xd7, 0x94, 0x26, 0x95, 0x63, 0x8c, 0x4f, 0xa9, 0xac, 0x0f,
        0xc3, 0x68, 0x8c, 0x4f, 0x97, 0x74, 0xb9, 0x05, 0xa1, 0x4e, 0x3a, 0x3f, 0x17, 0x1b, 0xac, 0x58,
        0x6c, 0x55, 0xe8, 0x3f, 0xf9, 0x7a, 0x1a, 0xef, 0xfb, 0x3a, 0xf0, 0x0a, 0xdb, 0x22, 0xc6, 0xbb,
    ];
    assert!(
        librustzcash_verify(&signature, &msg_hash, &pk)
    );
}

#[test]
fn test_librustzcash_pk_aggregate(){
    let n: u32 = 5;
    let pks:[u8;240] = [
        0x97, 0xf1, 0xd3, 0xa7, 0x31, 0x97, 0xd7, 0x94, 0x26, 0x95, 0x63, 0x8c, 0x4f, 0xa9, 0xac, 0x0f,
        0xc3, 0x68, 0x8c, 0x4f, 0x97, 0x74, 0xb9, 0x05, 0xa1, 0x4e, 0x3a, 0x3f, 0x17, 0x1b, 0xac, 0x58,
        0x6c, 0x55, 0xe8, 0x3f, 0xf9, 0x7a, 0x1a, 0xef, 0xfb, 0x3a, 0xf0, 0x0a, 0xdb, 0x22, 0xc6, 0xbb,
        0xa5, 0x72, 0xcb, 0xea, 0x90, 0x4d, 0x67, 0x46, 0x88, 0x08, 0xc8, 0xeb, 0x50, 0xa9, 0x45, 0x0c,
        0x97, 0x21, 0xdb, 0x30, 0x91, 0x28, 0x01, 0x25, 0x43, 0x90, 0x2d, 0x0a, 0xc3, 0x58, 0xa6, 0x2a,
        0xe2, 0x8f, 0x75, 0xbb, 0x8f, 0x1c, 0x7c, 0x42, 0xc3, 0x9a, 0x8c, 0x55, 0x29, 0xbf, 0x0f, 0x4e,
        0x89, 0xec, 0xe3, 0x08, 0xf9, 0xd1, 0xf0, 0x13, 0x17, 0x65, 0x21, 0x2d, 0xec, 0xa9, 0x96, 0x97,
        0xb1, 0x12, 0xd6, 0x1f, 0x9b, 0xe9, 0xa5, 0xf1, 0xf3, 0x78, 0x0a, 0x51, 0x33, 0x5b, 0x3f, 0xf9,
        0x81, 0x74, 0x7a, 0x0b, 0x2c, 0xa2, 0x17, 0x9b, 0x96, 0xd2, 0xc0, 0xc9, 0x02, 0x4e, 0x52, 0x24,
        0xac, 0x9b, 0x60, 0xd5, 0xaf, 0xcb, 0xd5, 0x66, 0x3a, 0x8a, 0x44, 0xb7, 0xc5, 0xa0, 0x2f, 0x19,
        0xe9, 0xa7, 0x7a, 0xb0, 0xa3, 0x5b, 0xd6, 0x58, 0x09, 0xbb, 0x5c, 0x67, 0xec, 0x58, 0x2c, 0x89,
        0x7f, 0xeb, 0x04, 0xde, 0xcc, 0x69, 0x4b, 0x13, 0xe0, 0x85, 0x87, 0xf3, 0xff, 0x9b, 0x5b, 0x60,
        0xb0, 0xe7, 0x79, 0x1f, 0xb9, 0x72, 0xfe, 0x01, 0x41, 0x59, 0xaa, 0x33, 0xa9, 0x86, 0x22, 0xda,
        0x3c, 0xdc, 0x98, 0xff, 0x70, 0x79, 0x65, 0xe5, 0x36, 0xd8, 0x63, 0x6b, 0x5f, 0xcc, 0x5a, 0xc7,
        0xa9, 0x1a, 0x8c, 0x46, 0xe5, 0x9a, 0x00, 0xdc, 0xa5, 0x75, 0xaf, 0x0f, 0x18, 0xfb, 0x13, 0xdc,
    ];
    let mut pk_sum = [0u8;48];
    assert!(
        librustzcash_pk_aggregate(&pks[0], 5, &mut pk_sum)
    );

    let pk =  [
        0x81, 0x47, 0x66, 0x5b, 0x6a, 0xd2, 0x80, 0xa7, 0x53, 0x85, 0xd4, 0x58, 0xc1, 0x21, 0x3c, 0xc8,
        0x02, 0x82, 0xf5, 0x56, 0x74, 0xf9, 0xc3, 0x7a, 0xec, 0xdd, 0x05, 0xc5, 0x22, 0xa9, 0xd8, 0x6c,
        0x07, 0x17, 0x13, 0xa4, 0x40, 0x9b, 0x1e, 0x5e, 0xeb, 0xe5, 0x81, 0x0f, 0xad, 0x8d, 0xd5, 0x6c,
    ];

    assert_eq!(&pk_sum[..], &pk[..]);
}

#[test]
fn test_librustzcash_sig_aggregate(){
    let msg_hash: [u8;96] = [
        0xab, 0x6c, 0x2, 0xbf, 0xb7, 0xc0, 0x75, 0x48, 0x73, 0x80, 0x89, 0xd9, 0xa, 0x98, 0xff, 0x7c,
        0xe4, 0x49, 0xae, 0x77, 0xaf, 0x9f, 0x2e, 0x2, 0x97, 0x9d, 0x43, 0xff, 0x44, 0xca, 0xf, 0xf1,
        0x7f, 0xab, 0x90, 0x12, 0x16, 0x4e, 0x1, 0x1b, 0xbd, 0x9e, 0xce, 0xf9, 0x13, 0xad, 0xdb, 0xb6,
        0x0, 0xfd, 0x77, 0xa3, 0x9a, 0xd0, 0x14, 0xb5, 0xe9, 0xf4, 0xdb, 0x2, 0xcb, 0x9e, 0x6, 0xa7,
        0x35, 0x88, 0xc8, 0xaf, 0x2f, 0x0, 0x64, 0x45, 0xc2, 0x50, 0x30, 0x7e, 0x7f, 0x90, 0xfd, 0xfb,
        0x83, 0xbd, 0x6c, 0x5f, 0xea, 0x4a, 0x2b, 0xa2, 0x3, 0x29, 0xdc, 0x12, 0x26, 0xa1, 0xe8, 0x6f,
    ];

    let pks:[u8;240] = [
        0x97, 0xf1, 0xd3, 0xa7, 0x31, 0x97, 0xd7, 0x94, 0x26, 0x95, 0x63, 0x8c, 0x4f, 0xa9, 0xac, 0xf,
        0xc3, 0x68, 0x8c, 0x4f, 0x97, 0x74, 0xb9, 0x5, 0xa1, 0x4e, 0x3a, 0x3f, 0x17, 0x1b, 0xac, 0x58,
        0x6c, 0x55, 0xe8, 0x3f, 0xf9, 0x7a, 0x1a, 0xef, 0xfb, 0x3a, 0xf0, 0xa, 0xdb, 0x22, 0xc6, 0xbb,
        0xa5, 0x72, 0xcb, 0xea, 0x90, 0x4d, 0x67, 0x46, 0x88, 0x8, 0xc8, 0xeb, 0x50, 0xa9, 0x45, 0xc,
        0x97, 0x21, 0xdb, 0x30, 0x91, 0x28, 0x1, 0x25, 0x43, 0x90, 0x2d, 0xa, 0xc3, 0x58, 0xa6, 0x2a,
        0xe2, 0x8f, 0x75, 0xbb, 0x8f, 0x1c, 0x7c, 0x42, 0xc3, 0x9a, 0x8c, 0x55, 0x29, 0xbf, 0xf, 0x4e,
        0x89, 0xec, 0xe3, 0x8, 0xf9, 0xd1, 0xf0, 0x13, 0x17, 0x65, 0x21, 0x2d, 0xec, 0xa9, 0x96, 0x97,
        0xb1, 0x12, 0xd6, 0x1f, 0x9b, 0xe9, 0xa5, 0xf1, 0xf3, 0x78, 0xa, 0x51, 0x33, 0x5b, 0x3f, 0xf9,
        0x81, 0x74, 0x7a, 0xb, 0x2c, 0xa2, 0x17, 0x9b, 0x96, 0xd2, 0xc0, 0xc9, 0x2, 0x4e, 0x52, 0x24,
        0xac, 0x9b, 0x60, 0xd5, 0xaf, 0xcb, 0xd5, 0x66, 0x3a, 0x8a, 0x44, 0xb7, 0xc5, 0xa0, 0x2f, 0x19,
        0xe9, 0xa7, 0x7a, 0xb0, 0xa3, 0x5b, 0xd6, 0x58, 0x9, 0xbb, 0x5c, 0x67, 0xec, 0x58, 0x2c, 0x89,
        0x7f, 0xeb, 0x4, 0xde, 0xcc, 0x69, 0x4b, 0x13, 0xe0, 0x85, 0x87, 0xf3, 0xff, 0x9b, 0x5b, 0x60,
        0xb0, 0xe7, 0x79, 0x1f, 0xb9, 0x72, 0xfe, 0x1, 0x41, 0x59, 0xaa, 0x33, 0xa9, 0x86, 0x22, 0xda,
        0x3c, 0xdc, 0x98, 0xff, 0x70, 0x79, 0x65, 0xe5, 0x36, 0xd8, 0x63, 0x6b, 0x5f, 0xcc, 0x5a, 0xc7,
        0xa9, 0x1a, 0x8c, 0x46, 0xe5, 0x9a, 0x0, 0xdc, 0xa5, 0x75, 0xaf, 0xf, 0x18, 0xfb, 0x13, 0xdc,
    ];

    let sigs:[u8;480] = [
        0xab, 0x6c, 0x02, 0xbf, 0xb7, 0xc0, 0x75, 0x48, 0x73, 0x80, 0x89, 0xd9, 0x0a, 0x98, 0xff, 0x7c,
        0xe4, 0x49, 0xae, 0x77, 0xaf, 0x9f, 0x2e, 0x02, 0x97, 0x9d, 0x43, 0xff, 0x44, 0xca, 0x0f, 0xf1,
        0x7f, 0xab, 0x90, 0x12, 0x16, 0x4e, 0x01, 0x1b, 0xbd, 0x9e, 0xce, 0xf9, 0x13, 0xad, 0xdb, 0xb6,
        0x00, 0xfd, 0x77, 0xa3, 0x9a, 0xd0, 0x14, 0xb5, 0xe9, 0xf4, 0xdb, 0x02, 0xcb, 0x9e, 0x06, 0xa7,
        0x35, 0x88, 0xc8, 0xaf, 0x2f, 0x00, 0x64, 0x45, 0xc2, 0x50, 0x30, 0x7e, 0x7f, 0x90, 0xfd, 0xfb,
        0x83, 0xbd, 0x6c, 0x5f, 0xea, 0x4a, 0x2b, 0xa2, 0x03, 0x29, 0xdc, 0x12, 0x26, 0xa1, 0xe8, 0x6f,
        0xb7, 0x45, 0x6d, 0x29, 0x85, 0xbf, 0x7d, 0x54, 0xb3, 0xd5, 0x57, 0x83, 0x0b, 0x72, 0xea, 0x9e,
        0xb7, 0x8d, 0x77, 0x63, 0x5b, 0x6c, 0x87, 0xc6, 0x9c, 0x45, 0xe2, 0x9d, 0x1b, 0xb4, 0x51, 0x2a,
        0x41, 0x68, 0xf8, 0x9f, 0x78, 0xb1, 0xbb, 0x09, 0xa1, 0xdc, 0x47, 0x0b, 0x87, 0xa9, 0x3c, 0xbe,
        0x07, 0x95, 0xf8, 0x4f, 0xbc, 0x27, 0x2a, 0xa8, 0x37, 0xdf, 0x3c, 0x28, 0x94, 0x5e, 0x73, 0x86,
        0x1f, 0x7e, 0xef, 0x0d, 0x1c, 0x40, 0x97, 0x2f, 0x16, 0xa1, 0xfe, 0x05, 0x98, 0x64, 0x56, 0x26,
        0x4b, 0x43, 0xc2, 0x0c, 0x44, 0x72, 0xf4, 0xe4, 0xf9, 0xc0, 0x1e, 0x75, 0x03, 0x0e, 0x4e, 0x50,
        0x8c, 0x7b, 0xcd, 0xe7, 0x43, 0xd8, 0xdd, 0x29, 0x05, 0x09, 0xc2, 0xc2, 0x1c, 0xb7, 0x35, 0x89,
        0xc8, 0x30, 0x95, 0x7b, 0x5c, 0x2a, 0xdc, 0xb2, 0x8d, 0x4f, 0xed, 0x99, 0xad, 0xfd, 0xc9, 0x4a,
        0xd6, 0xcb, 0xff, 0xc3, 0xe2, 0x71, 0x50, 0x3a, 0xa3, 0x19, 0xde, 0x94, 0x77, 0x3a, 0xa8, 0x3d,
        0x02, 0x12, 0x95, 0x45, 0x2c, 0xb6, 0x77, 0xae, 0xa0, 0xf6, 0x05, 0xb8, 0x1c, 0xfb, 0x52, 0x39,
        0x0d, 0x75, 0x61, 0xb8, 0x51, 0x25, 0x2b, 0xfa, 0x8a, 0x11, 0xb7, 0xad, 0x3a, 0xf9, 0x9c, 0x8c,
        0xe8, 0xe9, 0xda, 0x27, 0xa1, 0x6a, 0x89, 0x6b, 0x13, 0xff, 0x0b, 0x0f, 0x59, 0x58, 0xb0, 0x6f,
        0xa0, 0x1c, 0xfa, 0xc4, 0x19, 0x09, 0xe5, 0x51, 0x72, 0x27, 0xd8, 0xf1, 0x90, 0x9c, 0x58, 0x11,
        0x5e, 0xc9, 0xc6, 0xbf, 0xa3, 0x8e, 0x55, 0x06, 0xa6, 0x90, 0x6c, 0x3a, 0xf9, 0x52, 0xb8, 0x0f,
        0x88, 0xa8, 0x85, 0x08, 0xdc, 0xb4, 0x63, 0xef, 0x43, 0x37, 0x2a, 0x10, 0x5f, 0x50, 0xa8, 0xe5,
        0x0d, 0x1c, 0xcf, 0x37, 0xcb, 0x81, 0x73, 0xed, 0xef, 0xb4, 0x37, 0xd2, 0x31, 0x4e, 0x23, 0x11,
        0x9e, 0xd7, 0xbb, 0x83, 0x34, 0xa4, 0x5e, 0x0f, 0x0e, 0x9e, 0x5f, 0x9f, 0x3a, 0xd2, 0x00, 0xcc,
        0xbf, 0x68, 0x43, 0xff, 0x11, 0xb5, 0xa5, 0x24, 0x2e, 0x4d, 0x0d, 0xc0, 0x38, 0x2d, 0xf4, 0xac,
        0xa3, 0x84, 0x01, 0x99, 0x71, 0x8f, 0x68, 0xf5, 0xa0, 0xe7, 0xfb, 0xc4, 0x23, 0xf5, 0xf8, 0x0e,
        0x1b, 0xd6, 0x6f, 0x2c, 0xfa, 0xfa, 0x3d, 0x21, 0x3c, 0xdb, 0xce, 0x7b, 0xb0, 0x2d, 0x1b, 0xb7,
        0xe4, 0x2e, 0x1b, 0x0a, 0x7a, 0x0a, 0xc4, 0xb3, 0xce, 0x4e, 0x50, 0xd5, 0x2b, 0xaf, 0x9d, 0x3c,
        0x17, 0xf3, 0xa4, 0x30, 0x6a, 0xff, 0x64, 0x57, 0x08, 0x7f, 0x7f, 0x2e, 0x27, 0x5b, 0xee, 0xab,
        0x70, 0x0f, 0xaa, 0xb8, 0x6e, 0xb2, 0xa6, 0xd9, 0xcf, 0xf2, 0xb7, 0x3f, 0x52, 0x5f, 0x0b, 0xac,
        0x97, 0xc3, 0x14, 0x17, 0x6a, 0x15, 0xe4, 0x7c, 0x56, 0x95, 0xaf, 0x4c, 0x1c, 0x90, 0xdd, 0x7b,
    ];
    let mut sig_sum = [0u8;96];
    assert!(
        librustzcash_sig_aggregate(&msg_hash, &sigs[0], &pks[0], 5, &mut sig_sum)
    );
    let sig_sum2:[u8;96] = [
        0x86, 0x96, 0xfd, 0x68, 0x5b, 0xd4, 0xa4, 0x7e, 0x24, 0xcb, 0x39, 0x78, 0x23, 0x78, 0x12, 0xc5,
        0x97, 0xb7, 0x0a, 0xa4, 0xfa, 0x08, 0x3a, 0x8a, 0x8c, 0x8f, 0xa5, 0x6f, 0xec, 0x11, 0xcb, 0xcb,
        0x04, 0xf5, 0x59, 0xce, 0x77, 0xd1, 0x51, 0x49, 0xf3, 0xc1, 0x6b, 0xc2, 0xf8, 0xcc, 0x5f, 0x96,
        0x02, 0x56, 0x9e, 0x14, 0x3b, 0x9b, 0xaa, 0xfc, 0x25, 0xad, 0x52, 0xdc, 0xa6, 0x64, 0x4a, 0x67,
        0xdc, 0xf3, 0x5e, 0x3d, 0x99, 0x1b, 0x3f, 0x32, 0xbf, 0x3a, 0x1e, 0x77, 0x42, 0x4c, 0xa7, 0x77,
        0xb6, 0x2c, 0x9e, 0xa3, 0x65, 0x6a, 0x3e, 0xf1, 0xf2, 0x7c, 0x1a, 0xe1, 0x86, 0x92, 0x01, 0xa9,
    ];
    assert_eq!(&sig_sum[..], &sig_sum2[..])
}
